version: 2.1

commands:
  create-env:
    description: Create .env
    steps:
      - run:
          name: Adding environment variables to .env file
          command: |
            touch .env
            echo DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME >> ".env"
            echo DOCKERHUB_PW=$DOCKERHUB_PW >> ".env"
  destroy-environment:
    description: Destroy back-end stack given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy backend environment
          when: << parameters.when_to_run >>
          command: |
            pip install awscli
            aws cloudformation delete-stack --stack-name "bookingapp-backend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  setup-api:
    docker:
      - image: cimg/python:3.7.7
    steps:
      - checkout
      - run:
          name: Setup API Project
          command: |
            ls -la
            make setup
            source venv/bin/activate
            make install
      - save_cache:
          key: api-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - venv/
  check-api-lint:
    docker:
      - image: cimg/python:3.7.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - api-dependencies-{{ checksum "requirements.txt" }}
            - api-dependencies
      - run:
          name: Lint Api
          command: |
            pwd
            ls -la
            source venv/bin/activate
            pip list
            make lint
  test-api:
    docker:
      - image: cimg/python:3.7.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - api-dependencies-{{ checksum "requirements.txt" }}
            - api-dependencies
      - run:
          name: Run Tests
          command: |
            pwd
            ls -la
            export PYTHONPATH="${PYTHONPATH}:${PWD}"
            echo $PYTHONPATH
            source venv/bin/activate
            make test
  deploy-infrastructure:
    docker:
      - image: cibuilds/aws:latest
    steps:
      - checkout
      - run:
          name: Create API Infraestructure
          command: |
            aws cloudformation deploy \
             --template-file .circleci/cloudformation/backend.yml \
             --tags project=bookingapp-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --stack-name "bookingapp-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save backend IP in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            curl -H "Content-Type: text/plain" -H "token: f9859dd1-e3a9-4cd5-80d5-eaa113b6f15f" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to inventory.txt
          command: |
            BACKEND_IP=$(curl -H "token: f9859dd1-e3a9-4cd5-80d5-eaa113b6f15f" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            echo ${BACKEND_IP} >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when_to_run: on_fail
  configure-infrastructure:
    docker:
      - image: cimg/python:3.7.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [da:4b:06:ea:c6:48:55:73:87:7a:f9:3e:72:05:67:3d]
      - restore_cache:
          keys:
            - api-dependencies-{{ checksum "requirements.txt" }}
            - api-dependencies
      - attach_workspace:
          at: .
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            source venv/bin/activate
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/main-config-server.yml --user=ubuntu
      - destroy-environment:
          when_to_run: on_fail  
  deploy-api:
    docker:
      - image: cimg/python:3.7.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [da:4b:06:ea:c6:48:55:73:87:7a:f9:3e:72:05:67:3d]
      - restore_cache:
          keys:
            - api-dependencies-{{ checksum "requirements.txt" }}
            - api-dependencies
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: |
            source venv/bin/activate 
            pip install awscli
      - create-env
      - run:
          name: Deploy Backend API
          command: |
            pwd
            ls -la
            cd ..
            echo "Crearting bookingapp/ folder..."
            mkdir bookingapp/
            cp -r project/ bookingapp/
            echo "bookingapp/ folder created."
            ls -la
            echo "Crearting bookingapp tar.gz file..."
            tar --exclude='*.pyc' --exclude='__pycache__' -czf bookingapp.tar.gz bookingapp/
            echo "Moving bookingapp.tar.gz file to projec/ folder..."
            mv bookingapp.tar.gz project/
            cd /home/circleci/project/
            ls -la
            export ANSIBLE_HOST_KEY_CHECKING=false
            source venv/bin/activate
            pip list
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/main-deploy-api.yml --user=ubuntu -vvv
      - destroy-environment:
          when_to_run: on_fail  
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt-get install -y curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: f9859dd1-e3a9-4cd5-80d5-eaa113b6f15f" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            API_URL="http://${BACKEND_IP}"
            echo "${API_URL}"
            curl -s "${API_URL}/index" -v
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          when_to_run: on_fail
  cleanup:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Send old workflow id to memstash
          command: |
            OLD_W_ID=$(aws cloudformation \
              list-exports --query "Exports[].Name[]" \
              --no-paginate --output text)
            echo "OLD_W_ID=${OLD_W_ID}"
            curl -H "Content-Type: text/plain" -H "token: f9859dd1-e3a9-4cd5-80d5-eaa113b6f15f" --request PUT --data "$OLD_W_ID" https://api.memstash.io/values/OLD_W_ID
      - run:
          name: Get old workflow ID and remove old stacks and files
          command: |
            OLD_W_ID=$(curl -H "token: f9859dd1-e3a9-4cd5-80d5-eaa113b6f15f" --request GET https://api.memstash.io/values/OLD_W_ID)
            CURRENT_W_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo "OLD_W_ID=$OLD_W_ID"
            echo "CURRENT_W_ID=$CURRENT_W_ID"

            if [ -z "$OLD_W_ID" ]
            then
                echo "No OLD_W_ID found, nothing to cleanup."
            else 
                if [[ "$CURRENT_W_ID" != "$OLD_W_ID" ]]
                then
                    echo "$OLD_W_ID != $CURRENT_W_ID: Deleting old stack id"
                    aws cloudformation delete-stack --stack-name "bookingapp-backend-${OLD_W_ID}"                else
                  echo "$OLD_W_ID == $CURRENT_W_ID: Nothing to delete"
                fi
            fi
      - destroy-environment:
          when_to_run: on_fail
workflows:
  default:
    jobs:
      - setup-api
      - check-api-lint:
          requires: [setup-api]
      - test-api:
          requires: [check-api-lint]
      - deploy-infrastructure:
          requires: [test-api]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-api:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-api]
      - cleanup:
          requires: [smoke-test]